Help on module kmer_counter:

NAME
    kmer_counter - kmer_counter.py

DESCRIPTION
    This script focuses on the efficient counting of k-mers from biological sequences and provides functionality for generating k-mer count dictionaries.
    It supports both single-sequence and multi-sequence processing.

    Functions:
        count_kmers(sequence: str, k: int) -> dict:
            Counts k-mers of length `k` in a given biological sequence and returns a dictionary where keys are k-mers and values are their counts.

        merge_kmer_counts(kmer_dicts: list[dict]) -> dict:
            Merges multiple k-mer count dictionaries into a single dictionary, summing the counts for any overlapping k-mers.

        write_kmer_counts_to_file(kmer_counts: dict, output_file: str):
            Writes the k-mer counts to a file in TSV format, with one k-mer and its count per line.

        process_fasta_file(fasta_path: str, k: int) -> dict:
            Processes a FASTA file, counts k-mers for each sequence, and returns a dictionary of k-mer counts.

        kmer_counter_from_fasta_paths(fasta_paths: list[str], k: int, output_dir: str):
            Iterates over multiple FASTA files, computes k-mer counts for each, and saves them in TSV format.

    Main Execution:
        Command-line arguments:
            1. fasta_paths (list of str): List of paths to the FASTA files to be processed.
            2. k (int): Length of k-mers to be counted.
            3. output_dir (str): Directory where k-mer count TSV files will be saved.

        Workflow:
            1. Read biological sequences from FASTA files.
            2. Count k-mers for each sequence.
            3. Save the results to the specified output directory in TSV format.

FUNCTIONS
    count_sequence_length(sequences_by_species, output_dir_seq)
        Calculates the total sequence length for each input file.

        Args:
            sequences_by_species (list): List of dictionaries with "filename" and "sequences" keys.

        Returns:
            sequence_lengths (dict): Dictionary with filenames as keys and total sequence lengths as values.

    kmer_counter(sequence, k)
        Counts k-mers of defined length and stores counts in a dictionary.

        Args:
            input sequence (str)
            k (str): k-mer length

        Returns:
            kmer_count (dict): {k-mer: count}

    kmer_counter_multi_input(input_list, k_values, output_dir)
        Counts k-mers for multiple input files and generates k-mer count contingency tables.

        Args:
            input_list (list of lists): containing one list per input file which in turn contain all sequences of input file
            k_values (list): list of k-mer lengths
            table_inclusion_threshold (int): minimal k-mer frequency per cell for column to be included in contingency table

        Returns:
             .tsv files containing contingency table for each k-mer length


